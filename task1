import java.util.ArrayList;

public class PowerOfTwoMaxHeap {
    private ArrayList<Integer> heap;
    private int degree; // Degree will represent `d` where each node has `2^d` children
    
    // Constructor
    public PowerOfTwoMaxHeap(int degree) {
        if (degree < 0) {
            throw new IllegalArgumentException("Degree must be a non-negative integer.");
        }
        this.degree = degree;
        this.heap = new ArrayList<>();
    }

    // Insert a new element into the heap
    public void insert(int value) {
        // Add the new value to the end of the heap
        heap.add(value);
        // Maintain heap property by bubbling up
        bubbleUp(heap.size() - 1);
    }

    // Pop the max element from the heap
    public int popMax() {
        if (heap.isEmpty()) {
            throw new IllegalStateException("Heap is empty.");
        }
        // The root is the max value
        int maxValue = heap.get(0);
        // Move the last element to the root and shrink the heap
        int lastElement = heap.remove(heap.size() - 1);
        if (!heap.isEmpty()) {
            heap.set(0, lastElement);
            // Maintain heap property by bubbling down
            bubbleDown(0);
        }
        return maxValue;
    }

    // Private helper to maintain heap property after insertion
    private void bubbleUp(int index) {
        int parentIndex = getParentIndex(index);
        while (index > 0 && heap.get(parentIndex) < heap.get(index)) {
            swap(index, parentIndex);
            index = parentIndex;
            parentIndex = getParentIndex(index);
        }
    }

    // Private helper to maintain heap property after removing the max
    private void bubbleDown(int index) {
        while (true) {
            int maxIndex = index;
            int firstChildIndex = getFirstChildIndex(index);
            
            // Check all children of the current node
            for (int i = 0; i < Math.pow(2, degree); i++) {
                int childIndex = firstChildIndex + i;
                if (childIndex < heap.size() && heap.get(childIndex) > heap.get(maxIndex)) {
                    maxIndex = childIndex;
                }
            }

            // If the largest child is greater than the current node, swap them
            if (maxIndex != index) {
                swap(index, maxIndex);
                index = maxIndex;
            } else {
                break;
            }
        }
    }

    // Get the parent index of a node
    private int getParentIndex(int index) {
        return (index - 1) / (int)Math.pow(2, degree);
    }

    // Get the index of the first child of a node
    private int getFirstChildIndex(int index) {
        return (int)Math.pow(2, degree) * index + 1;
    }

    // Swap two elements in the heap
    private void swap(int i, int j) {
        int temp = heap.get(i);
        heap.set(i, heap.get(j));
        heap.set(j, temp);
    }
    
    // Test the heap
    public static void main(String[] args) {
        PowerOfTwoMaxHeap heap = new PowerOfTwoMaxHeap(1); // Testing with degree = 1 (binary heap)
        
        heap.insert(10);
        heap.insert(20);
        heap.insert(5);
        heap.insert(6);
        heap.insert(12);
        
        System.out.println(heap.popMax()); // Should print 20
        System.out.println(heap.popMax()); // Should print 12
        System.out.println(heap.popMax()); // Should print 10
    }
}
